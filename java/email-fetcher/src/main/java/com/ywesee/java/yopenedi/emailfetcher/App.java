/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.ywesee.java.yopenedi.emailfetcher;

import com.ywesee.java.yopenedi.converter.Converter;
import com.ywesee.java.yopenedi.OpenTrans.OpenTransWriter;
import com.ywesee.java.yopenedi.Edifact.Order;
import com.ywesee.java.yopenedi.Edifact.EdifactReader;

import com.sun.mail.imap.IMAPFolder;
import com.sun.mail.util.BASE64DecoderStream;
import org.apache.commons.cli.*;
import org.apache.commons.io.IOUtils;

import javax.mail.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.*;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Properties;

public class App {
    static File edifactFolder;
    static File openTransFolder;

    static String mailboxName = "inbox";
    static String mailUsername;
    static String mailPassword;
    static String mailHost;
    static String mailPort;
    static boolean mailSecure = false;

    static boolean skipSeenMessage;
    static boolean markMessageAsSeen;
    static boolean showDebugMessages;
    static String httpPostTo = null;

    static boolean setupCliFromArgs(String[] args) {
        Options options = new Options();

        Option edifactOption = new Option(
                null,
                "edifact",
                true,
                "The path to save edifact files."
        );
        edifactOption.setType(String.class);
        options.addOption(edifactOption);

        Option openTransOption = new Option(null, "opentrans", true, "The path to save OpenTrans files.");
        openTransOption.setType(String.class);
        options.addOption(openTransOption);

        Option mailboxOption = new Option(null, "mailbox", true, "Which folder in the mailbox to read. Case insensitive. Default: inbox.");
        mailboxOption.setType(String.class);
        options.addOption(mailboxOption);

        Option usernameOption = new Option(null, "mail-username", true, "Username for mailbox");
        usernameOption.setType(String.class);
        options.addOption(usernameOption);

        Option passwordOption = new Option(null, "mail-password", true, "Password for mailbox");
        passwordOption.setType(String.class);
        options.addOption(passwordOption);

        Option hostOption = new Option(null, "mail-host", true, "Host for mailbox");
        hostOption.setType(String.class);
        options.addOption(hostOption);

        Option portOption = new Option(null, "mail-port", true, "Port for mailbox");
        portOption.setType(String.class);
        options.addOption(portOption);

        Option secureOption = new Option(null, "mail-secure", false, "Use SSL for imap?");
        options.addOption(secureOption);

        Option skipSeenOption = new Option(null, "skip-seen", false, "Skip seen message?");
        options.addOption(skipSeenOption);

        Option markAsSeenOption = new Option(null, "mark-as-seen", false, "Mark message as seen after processing?");
        options.addOption(markAsSeenOption);

        Option uploadOption = new Option(null, "http-post-to", true, "Where to upload the file after processing.");
        uploadOption.setType(String.class);
        options.addOption(uploadOption);

        Option helpOption = new Option("h", "help", false, "Display help message");
        options.addOption(helpOption);

        Option debugOption = new Option(null, "debug", false, "Show debug messages");
        options.addOption(debugOption);

        CommandLineParser parser = new DefaultParser();
        try {
            CommandLine cmd = parser.parse(options, args);
            boolean showHelp = false;
            if (cmd.hasOption("h")) {
                showHelp = true;
            }
            if (!showHelp) {
                if (!cmd.hasOption("edifact")) {
                    System.err.println("Missing Option: --edifact");
                    showHelp = true;
                }
                if (!cmd.hasOption("opentrans")) {
                    System.err.println("Missing Option: --opentrans");
                    showHelp = true;
                }
                if (!cmd.hasOption("mail-username")) {
                    System.err.println("Missing Option: --mail-username");
                    showHelp = true;
                }
                if (!cmd.hasOption("mail-password")) {
                    System.err.println("Missing Option: --mail-password");
                    showHelp = true;
                }
                if (!cmd.hasOption("mail-host")) {
                    System.err.println("Missing Option: --mail-host");
                    showHelp = true;
                }
                if (!cmd.hasOption("mail-port")) {
                    System.err.println("Missing Option: --mail-port");
                    showHelp = true;
                }
            }
            if (showHelp) {
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp( "openedi", options);
                return false;
            }
            edifactFolder = new File(cmd.getOptionValue("edifact"));
            openTransFolder = new File(cmd.getOptionValue("opentrans"));
            if (cmd.hasOption("mailbox")) {
                mailboxName = cmd.getOptionValue("mailbox");
            }
            mailUsername = cmd.getOptionValue("mail-username");
            mailPassword = cmd.getOptionValue("mail-password");
            mailHost = cmd.getOptionValue("mail-host");
            mailPort = cmd.getOptionValue("mail-port");
            mailSecure = cmd.hasOption("mail-secure");
            skipSeenMessage = cmd.hasOption("skip-seen");
            markMessageAsSeen = cmd.hasOption("mark-as-seen");
            showDebugMessages = cmd.hasOption("debug");
            if (cmd.hasOption("http-post-to")) {
                httpPostTo = cmd.getOptionValue("http-post-to");
            }
            return true;
        } catch (ParseException e) {
            return false;
        }
    }

    public static void main(String[] args) throws Exception {

        if (!setupCliFromArgs(args)) {
            return;
        }

        if (!edifactFolder.exists()) {
            edifactFolder.mkdirs();
        }
        if (!openTransFolder.exists()) {
            openTransFolder.mkdirs();
        }

        final Properties properties = new Properties();
        if (mailSecure) {
            properties.put("mail.imap.ssl.enable", "true");
        }
        properties.setProperty("mail.imap.host", mailHost);
        properties.setProperty("mail.imap.port", mailPort);
        properties.setProperty("mail.imap.connectiontimeout", "5000");
        properties.setProperty("mail.imap.timeout", "5000");

        Session imapSession = Session.getInstance(properties, null);
        if (showDebugMessages) {
            imapSession.setDebug(true);
        }
        Store imapStore = imapSession.getStore("imap");

        imapStore.connect(mailHost, mailUsername, mailPassword);

        Folder defaultFolder = imapStore.getDefaultFolder();
        Folder[] folders = defaultFolder.list();

        IMAPFolder inbox = null;
        for (Folder f : folders) {
            if (f.getFullName().toLowerCase().equals(mailboxName.toLowerCase())) {
                inbox = (IMAPFolder)f;
                break;
            }
        }
        if (inbox == null) {
            System.err.println("Cannot find mailbox named " + mailboxName + ". Available folders are:");
            for (Folder f : folders) {
                System.err.println(f.getFullName());
            }
            throw new Exception("Cannot find mailbox.");
        }

        inbox.open(Folder.READ_WRITE);

        Message[] ms = inbox.getMessages();
        System.out.println("Found " + ms.length + " messages");

        for (Message message : ms) {
            long uid = inbox.getUID(message);
            System.out.println("Found message. UID=" + uid);

            boolean seen = message.isSet(Flags.Flag.SEEN);
            if (seen && skipSeenMessage) {
                System.out.println("Message is seen, skipping.");
                continue;
            } else {
                System.out.println("Getting attachment");
            }
            Object content = message.getContent();
            if (!(content instanceof BASE64DecoderStream)) {
                // handle multipart?
                System.err.println("Attachment is not base64, skipping");
                continue;
            }
            BASE64DecoderStream stream = (BASE64DecoderStream) content;

            File f = new File(edifactFolder, "" + uid);
            FileOutputStream fos = new FileOutputStream(f);
            IOUtils.copy(stream, fos);

            System.out.println("Saved file to " + f.getAbsolutePath());

            FileInputStream ediInputStream = new FileInputStream(f);
            EdifactReader edifactReader = new EdifactReader();
            ArrayList<Order> orders = edifactReader.run(ediInputStream);
            if (orders.size() > 1) {
                System.err.println("More than 1 order in edifact, ignore the rest");
            }

            Converter converter = new Converter();
            converter.shouldMergeContactDetails = true;
            com.ywesee.java.yopenedi.OpenTrans.Order otOrder = converter.orderToOpenTrans(orders.get(0));

            File targetFile = new File(openTransFolder, uid + ".xml");
            FileOutputStream otStream = new FileOutputStream(targetFile);
            System.out.println("Outputting order(id=" + otOrder.id + ") to " + targetFile.getAbsolutePath());

            OpenTransWriter w = new OpenTransWriter();
            w.write(otOrder, otStream);
            otStream.close();
            otStream.close();

            if (markMessageAsSeen) {
                System.out.println("Marking message as seen.");
                message.setFlag(Flags.Flag.SEEN, true);
            }
            uploadFile(targetFile);
        }
        inbox.close(false);
        System.out.println("Done");
    }

    static void uploadFile(File file) {
        if (httpPostTo == null) {
            return;
        }
        System.out.println("Uploading file (" + file.getAbsolutePath() + ") to " + httpPostTo);
        try {
            URL url = new URL(httpPostTo);
            URLConnection con = url.openConnection();
            HttpURLConnection http = (HttpURLConnection)con;
            http.setRequestMethod("POST");
            http.setRequestProperty("Content-Type", "text/xml; charset=UTF-8");
            http.setDoInput(true);
            http.setDoOutput(true);
            IOUtils.copy(new FileInputStream(file), con.getOutputStream());
            String res = IOUtils.toString(con.getInputStream(), Charset.defaultCharset());
            System.out.println("Response: " + res);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
